# Nathan Zhu May 24th, 2020 Stockton, CA 1:40 am. Renying watched lights out earleir and can't sleep lol
# Leetcode 928 | hard | hard
# Categry: DFS 


import collections

def minMalwareSpread(adj, initial):
    """
    :type graph: List[List[int]]
    :type initial: List[int]
    :rtype: int
    """
    R, C = len(adj), len(adj)
    table = collections.defaultdict(list)
    
    for i in initial:
        visited = set(initial)
        q = collections.deque([i])
        while q:
            curr = q.popleft()
            for neigh in range(R):
                if neigh not in visited and adj[curr][neigh] == 1:
                    visited.add(neigh)
                    table[neigh].append(i)
                    q.append(neigh)
                    
                    
    # We only want to count nodes which are met by at most 1 infected node
    inf_to_non_inf = [0] * C
    for non_inf, inf_list in table.items():
        if len(inf_list) == 1:   # at most 1 inf node connected
            inf_to_non_inf[inf_list[0]] += 1
            
    if not any(inf_to_non_inf): return min(initial)
    max_val = max(inf_to_non_inf)
    return inf_to_non_inf.index(max_val)
if __name__ == "__main__":
    print(minMalwareSpread([[1,1,0],[1,1,1],[0,1,1]], [0,1]))
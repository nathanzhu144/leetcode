# Nathan Zhu, Amex Tower, Friday July 12th, 2019 1:33 pm
# Leetcode 241 | medium | I think med
# Category: Divide and conq
#
# Ran into a lot of strange bugs, cause -1 is two characters, not 1.


# Given a string of numbers and operators, return all possible results from
# computing all the different possible ways to group numbers and operators. 
# The valid operators are +, - and *.

# Solution:
# So, there are two ways you can think of this problem.
#
# Originally, I thought of it this way.
# Given an expression, we can choose to evaluate any 2 consecutive terms, 
# and recur for everythin else.  For example, we can choose to evaluate (2 - 3)
# first or evaluate (3 * 4) first or chosoe to evaluate (4 + 2) first. then,
# we can do that recursively till we get one number. 
#
#  (2 - 3) * 4 + 2  =>  -1 * 4 + 2
#  2 - (3 * 4) + 2  =>  2 - 12 + 2
#  2 - 3 * (4 + 2)  =>  2 - 3 * 6
#d
#  The only "issue" is the for loop is harder to write, as we have to increment
#  by two every time.  This makes it harder to think about and code in a timed setting.
#
#
#  A simpler way is, 
#  We iterate through the array.  When we see a sign, we can recur to all possible
#  numbers generated by left of the sign, and recur for all possible numbers generated
#  by right of the sign.  Then, we can perfom the sign operations on all of them.
#  That's the approach below.
#
#  [stuff left of sign] + [stuff right of sign]
#
#  

def diff_ways_add_parens(string):
    # Input: ['2', '*', '3']
    # Output: 6
    def compute(string):
        if string[1] == "*": return int(string[0]) * int(string[2])
        if string[1] == "-": return int(string[0]) - int(string[2])
        if string[1] == "+": return int(string[0]) + int(string[2])

    def helper(string):
        # Note how you can't say len(string) == 1, as len("-2") == 2
        if string.isdigit(): return [int(string)]
        
        ret = []
        for i in range(len(string)):
            # We do a divide and conquer when we hit a math sign.
            # when we split at this point, 
            # poss_left is all different signs made from left
            # poss_right is all different signs made from right
            if string[i] in "*-+":
                poss_left = helper(string[:i])
                poss_right = helper(string[i + 1:])
                for l in poss_left:
                    for r in poss_right:
                        ret.append(compute([l] + [string[i]] + [r]))

        return ret
    return helper(string)

if __name__ == "__main__":
    print(diff_ways_add_parens("2-1-2"))


